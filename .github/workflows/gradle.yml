name: Java CI with Gradle and Deploy to EC2

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # 1. 코드 체크아웃
      - uses: actions/checkout@v4

      # 2. JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 빌드 설정
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4.0.0

      # 4. Gradle 빌드 실행
      - name: Build with Gradle Wrapper
        run: ./gradlew build

      # 5. SSH 설정
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      # 6. JAR 및 Dockerfile 전송
      - name: Copy files to EC2
        run: |
          scp build/libs/*.jar ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/app/app.jar
          scp Dockerfile ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/app/Dockerfile
          scp src/main/resources/application.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}/app/config/application.yml

      # 7. Docker 빌드 및 실행
      - name: Deploy on EC2
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          cd /home/${{ secrets.EC2_USER }}/app
          docker build -t loa-scheduler .
          docker stop loa-scheduler || true
          docker rm loa-scheduler || true
          docker run -d -p 8080:8080 --name loa-scheduler loa-scheduler
          EOF
